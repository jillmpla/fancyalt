openapi: 3.0.3
info:
  title: FancyAlt API
  version: 1.0.0
  description: |
    **FancyAlt** is a creative accessibility and storytelling API that analyzes images using Azure AI Vision 
    and generates captions, creative stories, or moderates content for safety.

    **Let every image tell its own story!**

    <img src="/bob.png" alt="Let every image tell its own story" width="250" />
    
    You can:
    - Upload an image file for captioning, storytelling, or moderation
    - Analyze public image URLs (caption or moderation)

    FancyAlt combines powerful AI image analysis with imaginative writing, all in an accessible and easy-to-use format.

    ---

    ## üöÄ Quick Start

    You can test the FancyAlt API using either **cURL** or an API client like **Postman**.
    
    ### üì∏ Upload an Image
    
    Use this endpoint to upload an image and receive alt text, a story, dense captions, or moderation info.
    
    - **Endpoint:** `POST /api/generate-caption`
    - **Content Type:** `multipart/form-data`
    
    **cURL Example:**
    ```bash
    curl -X POST "https://fancyalt.com/api/generate-caption" \
    -H "Content-Type: multipart/form-data" \
    -F "image=@/path/to/image.jpg" \
    -F "mode=basicCaption"
    ```
    
    ‚úÖ Accepted image formats: `image/jpeg`, `image/png`, `image/webp`
    
    **Postman Setup:**
    - Method: `POST`
    - URL: `https://fancyalt.com/api/generate-caption`
    - Body (form-data):
        - `image` = (Select file)
        - `mode` = basicCaption
    
    ---
    
    ### üåê Analyze an Image URL
    
    Use this endpoint to analyze a **public image URL** instead of uploading a file.
    
    - **Endpoint:** `GET /api/analyze-url`
    - **Parameters:** `img`, `mode`
    
    **cURL Example:**
    ```bash
    curl -G "https://fancyalt.com/api/analyze-url" \
    --data-urlencode "img=https://images.unsplash.com/photo-1621370114522-f08290f80f67" \
    --data-urlencode "mode=urlAnalyze"
    ```
    
    ‚úÖ URL must be public and accessible without login.
    
    **Postman Setup:**
    - Method: `GET`
    - URL: `https://fancyalt.com/api/analyze-url`
    - Params:
        - `img` = `https://images.unsplash.com/photo-1621370114522-f08290f80f67`
        - `mode` = urlAnalyze
    
    üí° All responses return structured JSON including `caption`, `tags`, `moderation`, and more.
    
    ---

    ## üí° Use Cases

    - **Alt-text automation** for accessibility compliance.
    - **Story generation** for galleries, e-learning, and media apps.
    - **Content moderation** Screen images for safety before publishing.
    - **Image tagging** for SEO and content management.
    - **AI-powered insights** for image-based reports or apps.

    ---

    ## üß† Glossary
    
    - **basicCaption**: Short alt-text caption generated by Azure Vision.
    - **storyCaption**: 2‚Äì3 sentence narrative generated by OpenAI based on Azure Vision results.
    - **moderateOnly**: Content safety check for adult, racy, or gory material.
    
    ---
    
    ## üîå Azure AI Vision Integration
    
    FancyAlt uses **Azure AI Vision v3.2** via a Cognitive Services **Multiservice Resource** to provide:
      - **Image Captions**
      - **Tags**
      - **Content Moderation (adult, racy, gory)**
    
    **Environment Variables in Use**:
      - `AZURE_KEY`
      - `AZURE_ENDPOINT`
      - `AZURE_REGION`
      - `OPENAI_API_KEY`

    ---

    ## üîÅ FancyAlt API Flow

    ```
    Start
    ‚¨áÔ∏è
    [ Upload Image or Provide URL ]
    ‚¨áÔ∏è
    [ Validate Inputs ]
    ‚¨áÔ∏è

    If Upload (POST /generate-caption):
        ‚¨áÔ∏è
        [ Moderate Content (always happens) ]
        ‚¨áÔ∏è
        [ Choose Mode ]
            ‚îú‚îÄ‚îÄ basicCaption ‚û°Ô∏è [ Generate Basic Caption ]
            ‚îú‚îÄ‚îÄ storyCaption ‚û°Ô∏è [ Generate Basic Caption + Creative Story ]
            ‚îú‚îÄ‚îÄ moderateOnly ‚û°Ô∏è [ Return Moderation Only ]
        ‚¨áÔ∏è
        [ Return Final Response (JSON) ]

    If URL (GET /analyze-url):
        ‚¨áÔ∏è
        [ Choose Mode ]
            ‚îú‚îÄ‚îÄ urlAnalyze ‚û°Ô∏è [ Generate Basic Caption from URL ]
            ‚îú‚îÄ‚îÄ urlModerate ‚û°Ô∏è [ Moderate Content from URL ]
        ‚¨áÔ∏è
        [ Return Final Response (JSON) ]
    ```

    ---

    ## ‚ùó Error Codes
    
    - **400 ‚Äì Bad Request**: Missing file, URL, or invalid mode.
    - **401 ‚Äì Unauthorized**: Authentication required.
    - **403 ‚Äì Forbidden**: Access not allowed.
    - **404 ‚Äì Not Found**: Endpoint or resource doesn‚Äôt exist.
    - **413 ‚Äì Payload Too Large**: File exceeds 5MB limit.
    - **415 ‚Äì Unsupported Media Type**: Only JPEG, PNG, or WEBP allowed.
    - **422 ‚Äì Unprocessable Entity**: Image couldn‚Äôt be retrieved or analyzed.
    - **500 ‚Äì Internal Server Error**: Azure or OpenAI failed, or unknown error occurred.

    ---

    ## üì¶ Versioning

    - **Current Version**: 1.0.0 (2025-05-04)
    - Initial release with image upload & image URL analysis
    - Added support for captions, story generation, and moderation
    - _A new API has awakened. May the captions be with you._

    ---

    ## üîê Privacy & Security
    
    - **Private by Design**: Images are never shared or stored long-term.
    - **Temporary Storage**: Uploaded files are auto-deleted daily via a scheduled cleanup.
    - **Content Screening**: Every image is scanned for adult, racy, or gory content before processing.
    - **Rate Limits**: Each IP is limited to 25 requests per 15 minutes to ensure fair use.
    - **Safe Uploads**: Only JPEG, PNG, or WEBP images under 5MB are accepted.

    ---

    ## üì∏ Image Upload Example:

    <img src="/sample_pic.png" alt="Sample Upload Image" width="400" />

    ## üåê Image URL Example:

    [https://images.unsplash.com/photo-1621370114522-f08290f80f67](https://images.unsplash.com/photo-1621370114522-f08290f80f67)
    
    ---

servers:
  - url: https://fancyalt.com/api
    description: Production API ‚Äì live site
  - url: http://localhost:5000/api
    description: Local development ‚Äì test on your machine

tags:
  - name: Upload & Analyze
    description: Upload an image and generate alt-text, a story, or moderate content.

  - name: Analyze by URL
    description: Analyze public image URLs for alt-text and/or moderation.

  - name: Misc
    description: Status and health check endpoints.

paths:
  /generate-caption:
    post:
      tags:
        - Upload & Analyze
      summary: Upload an image and generate alt-text, a story, or moderate content.
      description: |
        Analyze an uploaded image to:
        - Generate a basic alt-text caption (`basicCaption`)
        - Create a short story using OpenAI (`storyCaption`)
        - Scan the image for adult, racy, or gory content (`moderateOnly`)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Upload an image file (.jpg, .png)
                mode:
                  type: string
                  description: |
                    Determines the type of output to generate:
                    - `basicCaption`: Basic caption from Azure Vision
                    - `storyCaption`: Basic caption + creative story (via OpenAI)
                    - `moderateOnly`: Content safety check only
                  enum: ["basicCaption", "storyCaption", "moderateOnly"]
                  example: basicCaption
      responses:
        '200':
          description: Successfully processed the uploaded image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateCaptionResponse'
              example:
                flagged: false
                moderation:
                  isAdultContent: false
                  isRacyContent: false
                  isGoryContent: false
                  adultScore: 0.0010749917710199952
                  racyScore: 0.001864879159256816
                  goreScore: 0.0009593736613169312
                usedFallback: true
                mode: basicCaption
                caption: "sun shining through clouds over a forest"
                tags:
                  - name: landscape
                    confidence: 0.9986926317214966
                  - name: outdoor
                    confidence: 0.9978520274162292
                  - name: mountain
                    confidence: 0.9935379028320312
                  - name: sky
                    confidence: 0.9925613403320312
                  - name: cloud
                    confidence: 0.992494523525238
                  - name: tree
                    confidence: 0.9639609456062317
                  - name: nature
                    confidence: 0.9530966281890869
                  - name: sunlight
                    confidence: 0.9325860142707825
                  - name: plant
                    confidence: 0.9297385215759277
                  - name: sunrise
                    confidence: 0.9211484789848328
                  - name: sun
                    confidence: 0.9196833372116089
                  - name: highland
                    confidence: 0.9016975164413452
                  - name: morning
                    confidence: 0.8864269256591797
                  - name: wilderness
                    confidence: 0.8731318712234497
                  - name: hill
                    confidence: 0.8690327405929565
                  - name: hill station
                    confidence: 0.8447641134262085
                  - name: grass
                    confidence: 0.7114472389221191
                  - name: sunset
                    confidence: 0.7075529098510742
                  - name: field
                    confidence: 0.5556854009628296
                confidence: 0.3789919316768646
        '400':
          description: Bad Request (missing file or invalid mode)
          content:
            application/json:
              example:
                error: Bad Request
                details: "Missing image file or invalid mode provided"
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found (the requested endpoint does not exist)
          content:
            application/json:
              example:
                error: Not Found
                details: "The requested route or resource was not found."
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '415':
          description: Unsupported Media Type (wrong file format)
          content:
            application/json:
              example:
                error: Unsupported Media Type
                details: "Only JPEG, PNG, and WEBP image files are allowed."
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error (failed to process image)
          content:
            application/json:
              example:
                error: Internal Server Error
                details: "Azure Vision API failed to analyze the image"
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /analyze-url:
    get:
      tags:
        - Analyze by URL
      summary: Analyze public image URLs for alt-text and/or moderation.
      description: |
        Analyze a public image via URL to:
        - Generate a basic alt-text caption (`urlAnalyze`)
        - Screen the image for adult, racy, or gory content (`urlModerate`)

        The image must be publicly accessible without authentication.
      parameters:
        - in: query
          name: img
          required: true
          schema:
            type: string
            format: uri
            example: https://images.unsplash.com/photo-1621370114522-f08290f80f67
          description: Public image URL to analyze
        - in: query
          name: mode
          required: true
          schema:
            type: string
            enum: [ "urlModerate", "urlAnalyze" ]
            example: urlAnalyze
          description: |
            Select the type of analysis to perform:
            - `urlAnalyze`: Generate alt-text and tags
            - `urlModerate`: Scan image for unsafe content
      responses:
        '200':
          description: Successfully analyzed the public image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeUrlResponse'
              example:
                mode: urlAnalyze
                imageUrl: https://images.unsplash.com/photo-1621370114522-f08290f80f67
                caption: "a dog holding a stick in its mouth on a beach"
                tags:
                  - name: outdoor
                    confidence: 0.9934214353561401
                  - name: sky
                    confidence: 0.9610404372215271
                  - name: dog breed
                    confidence: 0.9252827167510986
                  - name: beach
                    confidence: 0.9249777793884277
                  - name: ground
                    confidence: 0.9190628528594971
                  - name: water
                    confidence: 0.9052671194076538
                  - name: cloud
                    confidence: 0.849004328250885
                  - name: dog
                    confidence: 0.7305078506469727
                  - name: animal
                    confidence: 0.5699875354766846
                  - name: sand
                    confidence: 0.49394720792770386
                confidence: 0.5919649004936218
                flagged: false
                usedFallback: true
        '404':
          description: Not Found (the requested endpoint does not exist)
          content:
            application/json:
              example:
                error: Not Found
                details: "The requested route or resource was not found."
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad Request (missing parameters or invalid mode)
          content:
            application/json:
              example:
                error: Bad Request
                details: "Missing img URL or mode parameter"
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity (image could not be analyzed)
          content:
            application/json:
              example:
                error: Unprocessable Entity
                details: "The image could not be retrieved or is unsupported"
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error (failed to analyze image URL)
          content:
            application/json:
              example:
                error: Internal Server Error
                details: "Azure Vision API request failed"
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /status:
    get:
      tags:
        - Misc
      summary: Status and health check endpoints.
      description: |
        Returns the current status, API version, and timestamp of the FancyAlt service.
      responses:
        '200':
          description: FancyAlt is running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
              example:
                status: "ok"
                version: "1.0.0"
                timestamp: "2025-05-05T14:12:30Z"

components:
  schemas:
    GenerateCaptionResponse:
      type: object
      properties:
        mode:
          type: string
          description: "The selected analysis mode used to process the image"
          example: basicCaption
        caption:
          type: string
          description: "A single alt-text style caption describing the overall image"
          example: sun shining through clouds over a forest
        tags:
          type: array
          description: "A list of tags with confidence scores from Azure Vision"
          items:
            type: object
            properties:
              name:
                type: string
                description: "The name of the detected tag"
              confidence:
                type: number
                format: float
                description: "Confidence score for the tag"
          example:
            - name: landscape
              confidence: 0.9986926317214966
            - name: outdoor
              confidence: 0.9978520274162292
            - name: mountain
              confidence: 0.9935379028320312
        confidence:
          type: number
          format: float
          description: "Confidence score (0.0‚Äì1.0) for the generated caption"
          minimum: 0
          maximum: 1
          example: 0.3789919316768646
        story:
          type: string
          nullable: true
          description: "Short narrative generated using OpenAI based on the image"
          example: The morning sun pierced through drifting clouds, unveiling a quiet forest waking to a new day.
        moderation:
          type: object
          nullable: true
          description: "Content moderation scores from Azure Vision API"
          properties:
            isAdultContent:
              type: boolean
              description: "True if the image likely contains adult content"
            isRacyContent:
              type: boolean
              description: "True if the image is deemed racy or provocative"
            isGoryContent:
              type: boolean
              description: "True if the image contains graphic or gory content"
            adultScore:
              type: number
              format: float
              description: "Confidence score for adult content"
              minimum: 0
              maximum: 1
            racyScore:
              type: number
              format: float
              description: "Confidence score for racy content"
              minimum: 0
              maximum: 1
            goreScore:
              type: number
              format: float
              description: "Confidence score for gory content"
              minimum: 0
              maximum: 1
          example:
            isAdultContent: false
            isRacyContent: false
            isGoryContent: false
            adultScore: 0.0010749917710199952
            racyScore: 0.001864879159256816
            goreScore: 0.0009593736613169312
        flagged:
          type: boolean
          description: "True if moderation scores exceeded unsafe thresholds"
          example: false

    AnalyzeUrlResponse:
      type: object
      properties:
        mode:
          type: string
          description: "Mode of analysis performed on the image URL"
          example: urlAnalyze
        imageUrl:
          type: string
          format: uri
          description: "The URL of the image that was analyzed"
          example: https://example.com/photo.jpg
        caption:
          type: string
          description: "Generated caption describing the overall image"
          example: A happy cat sitting on a sunny windowsill.
        tags:
          type: array
          description: "Tags representing key objects or features detected in the image"
          items:
            type: object
            properties:
              name:
                type: string
                description: "The name of the detected tag"
              confidence:
                type: number
                format: float
                description: "Confidence score for the tag"
          example:
            - name: outdoor
              confidence: 0.9934214353561401
            - name: sky
              confidence: 0.9610404372215271
        moderation:
          type: object
          nullable: true
          description: "Adult, racy, or gory content detection results"
          properties:
            isAdultContent:
              type: boolean
              description: "Indicates if adult content was detected"
            isRacyContent:
              type: boolean
              description: "Indicates if racy content was detected"
            isGoryContent:
              type: boolean
              description: "Indicates if gory content was detected"
            adultScore:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: "Confidence score for adult content"
            racyScore:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: "Confidence score for racy content"
            goreScore:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: "Confidence score for gory content"
        flagged:
          type: boolean
          description: "True if any of the moderation scores exceed the defined unsafe threshold"
          example: false

    ErrorResponse:
      type: object
      required:
        - error
        - details
      properties:
        error:
          type: string
          description: "The HTTP error category or status name"
          enum: [ "Bad Request", "Unauthorized", "Forbidden", "Not Found", "Unsupported Media Type", "Payload Too Large", "Internal Server Error" ]
          example: Bad Request
        details:
          type: string
          description: "A human-readable explanation of what went wrong"
          example: Missing image or invalid mode

    StatusResponse:
      type: object
      required:
        - status
        - version
        - timestamp
      properties:
        status:
          type: string
          description: "Current status of the API"
          example: ok
        version:
          type: string
          description: "The currently deployed API version"
          example: 1.0.0
        timestamp:
          type: string
          format: date-time
          description: "The UTC timestamp when the status was retrieved"
          example: 2025-05-04T20:14:56Z
